spring.cloud.stream.kafka.binder.producerProperties.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.cloud.stream.kafka.binder.producerProperties.key.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.cloud.stream.kafka.binder.consumerProperties.key.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.consumerProperties.value.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.consumerProperties.auto.offset.reset=latest
spring.cloud.stream.kafka.binder.configuration.security.protocol=SSL
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.cloud.function.definition=functionRouter;sendMessage;
spring.cloud.stream.kafka.binder.brokers=<brokerUrl>
spring.kafka.ssl.key-store-location=
spring.kafka.ssl.trust-store-location=
spring.kafka.ssl.key-store-password=
spring.kafka.ssl.trust-store-password=
spring.kafka.ssl.key-password=
spring.cloud.stream.bindings.sendMessage-out-0.destination=<topic>
spring.cloud.stream.bindings.functionRouter-in-0.group=<groupId>
spring.cloud.stream.bindings.functionRouter-in-0.destination=<topic>
io.muenchendigital.digiwf.streaming.typeMappings.getPerson=getPerson
io.muenchendigital.digiwf.streaming.typeMappings.searchPerson=searchPerson
io.muenchendigital.digiwf.streaming.typeMappings.getPersonErweitert=getPersonErweitert
io.muenchendigital.digiwf.streaming.typeMappings.searchPersonErweitert=searchPersonErweitert
io.muenchendigital.digiwf.okewo.url=
io.muenchendigital.digiwf.okewo.username=
io.muenchendigital.digiwf.okewo.password=

